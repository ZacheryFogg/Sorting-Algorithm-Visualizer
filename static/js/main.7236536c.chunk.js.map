{"version":3,"sources":["reducers/index.js","actionCreators/index.js","components/Dropdown.js","algorithms/bubbleSort.js","algorithms/mergeSort.js","algorithms/quickSort.js","algorithms/heapSort.js","algorithms/insertionSort.js","algorithms/selectionSort.js","components/ControlBar.js","components/ArrayDisplay.js","components/App.js","index.js"],"names":["combineReducers","currentInsertionShifter","state","action","type","payload","currentSelectionMin","currentSelectionFocused","currentHeapFocused","currentPivot","currentQuickFocused","currentMergeFocused","speed","isRunning","isPaused","currentBubbleFocused","array","currentSorted","length","slice","concat","currentSwappers","currentAlgorithm","setCurrentSwappers","arr","setArray","setCurrentBubbleFocused","setCurrentSorted","element","setIsRunning","val","setCurrentAlgorithm","alg","setCurrentMergeFocused","setCurrentQuickFocused","setCurrentPivot","setCurrentHeapFocused","setCurrentSelectionFocused","setCurrentSelectionMin","setCurrentInsertionShifter","setIsPaused","connect","dispatch","changeCurrentAlgorithm","props","useState","open","setOpen","ref","useRef","useEffect","onBodyClick","event","current","contains","target","document","body","addEventListener","removeEventListener","renderedOptions","options","map","option","value","currenAlgorithm","className","onClick","label","id","find","dispatchFrames","frames","getSpeed","getIsRunning","index","setTimeout","num","dispatchFunc","leadingFrameLen","shift","bubbleSort","stateArr","sorted","iteration","i","push","temp","mergeSortHelper","start","end","obj","half","Math","floor","first","second","indexHalf","actualFirst","actualSecond","isFinalMerge","sortedArray","indexToPush","forEach","subArr","actualSort","handleDispatch","dispatchFunction","currentframes","mergeSort","stateArray","finalArray","idx","quickSortHelper","pivot","left","right","Array","quickSort","siftDown","swap","heapSort","currentIndex","buildMaxHeap","method","outFrame","insertionSort","j","key","console","log","selectionSort","minIndex","algOptions","algDescriptions","desc","complexity","ControlBar","callbackChangeSpeedBound","callbackChangeSpeed","bind","callbackIsRunningBound","callbackIsRunning","this","generateNewArray","startSort","cancelSort","changeSpeed","pauseSort","disabled","htmlFor","min","max","onChange","valueAsNumber","React","Component","ownProps","len","upperBound","lowerBound","randomArr","random","sortingAlg","setCurrentSpeed","ArrayDisplay","renderedArray","elementWidthVal","fontSizeVal","borderRadiusVal","borderWidthVal","borderWidth","borderRadius","elementWidth","margin","fontSize","elementColor","darkPurpleColor","includes","orangeColor","pinkColor","yellowColor","lightPurpleColor","style","height","width","marginLeft","marginRight","backgroundColor","color","App","ReactDOM","render","store","createStore","reducers","getElementById"],"mappings":"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","file":"static/js/main.7236536c.chunk.js","sourcesContent":["/*\r\n    File contains all reducers and exports a combinedReducers\r\n*/\r\n\r\nimport { combineReducers } from 'redux';\r\n\r\n// Sets current elements in array to be swapped for highlighting\r\nconst currentSwappersReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'SET_CURRENT_SWAPPERS':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Sets current state of array for body\r\nconst currentArrayReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'SET_ARRAY':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Sets current elements being evalutated\r\nconst currentBubbleFocusedReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'SET_CURRENT_BUBBLE_FOCUSED':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// Update the list of elements sorted in their final positions\r\nconst currentSortedReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'SET_CURRENT_SORTED':\r\n      if (action.payload.length) {\r\n        // Concatenate the payload elements to the current list\r\n        return state.slice(0).concat(action.payload);\r\n      }\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// Update the state of isRunning\r\nconst isRunningReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case 'SET_IS_RUNNING':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Update the currently selected algorithm\r\nconst currentAlgorithmReducer = (state = 'bubbleSort', action) => {\r\n  switch (action.type) {\r\n    case 'SET_CURRENT_ALGORITHM':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Update speed\r\nconst currentSpeedReducer = (state = 300, action) => {\r\n  switch (action.type) {\r\n    case 'SET_SPEED':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst currentMergeFocusedReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'SET_CURRENT_MERGE_FOCUSED':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst currentQuickFocusedReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'SET_CURRENT_QUICK_FOCUSED':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst currentPivotReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n    case 'SET_CURRENT_PIVOT':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst currentHeapFocusedReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'SET_CURRENT_HEAP_FOCUSED':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst currentSelectionFocusedReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'SET_CURRENT_SELECTION_FOCUSED':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst currentSelectionMinRudcer = (state = null, action) => {\r\n  switch (action.type) {\r\n    case 'SET_CURRENT_SELECTION_MIN':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst currentInsertionShifterReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n    case 'SET_CURRENT_INSERTION_SHIFTER':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst isPausedReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case 'SET_IS_PAUSED':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default combineReducers({\r\n  currentInsertionShifter: currentInsertionShifterReducer,\r\n  currentSelectionMin: currentSelectionMinRudcer,\r\n  currentSelectionFocused: currentSelectionFocusedReducer,\r\n  currentHeapFocused: currentHeapFocusedReducer,\r\n  currentPivot: currentPivotReducer,\r\n  currentQuickFocused: currentQuickFocusedReducer,\r\n  currentMergeFocused: currentMergeFocusedReducer,\r\n  speed: currentSpeedReducer,\r\n  isRunning: isRunningReducer,\r\n  isPaused: isPausedReducer,\r\n  currentBubbleFocused: currentBubbleFocusedReducer,\r\n  array: currentArrayReducer,\r\n  currentSorted: currentSortedReducer,\r\n  currentSwappers: currentSwappersReducer,\r\n  currentAlgorithm: currentAlgorithmReducer,\r\n});\r\n","/*\r\n    File contains all action creators \r\n*/\r\n\r\n// Creates action to render paid or elements about to swap\r\n// arr refers to the array of two elements passed in\r\nexport const setCurrentSwappers = (arr) => {\r\n  return {\r\n    type: 'SET_CURRENT_SWAPPERS',\r\n    payload: arr,\r\n  };\r\n};\r\n\r\n// Creates action to set the state of the entire array - when the element positions\r\n// have changed:   arr refers to the entire array\r\nexport const setArray = (arr) => {\r\n  return {\r\n    type: 'SET_ARRAY',\r\n    payload: arr,\r\n  };\r\n};\r\n\r\n// Creates action to set the current two elements being considered for a swap\r\n// arr refers to the two elements being considered\r\nexport const setCurrentBubbleFocused = (arr) => {\r\n  return {\r\n    type: 'SET_CURRENT_BUBBLE_FOCUSED',\r\n    payload: arr,\r\n  };\r\n};\r\n\r\n// Creates action to set the current portion of the array that is sorted\r\n// element refers to the element that should be added to the portion of elements sorted\r\nexport const setCurrentSorted = (element) => {\r\n  return {\r\n    type: 'SET_CURRENT_SORTED',\r\n    payload: element,\r\n  };\r\n};\r\n\r\n// Create action to set the status of isRunning depending on if the array sorting\r\n// animation is running or not\r\nexport const setIsRunning = (val) => {\r\n  return {\r\n    type: 'SET_IS_RUNNING',\r\n    payload: val,\r\n  };\r\n};\r\n\r\n// Create action to update the currently selected sorting algorithm\r\nexport const setCurrentAlgorithm = (alg) => {\r\n  return {\r\n    type: 'SET_CURRENT_ALGORITHM',\r\n    payload: alg,\r\n  };\r\n};\r\n\r\n//Used to modify speed during sorting execution\r\nexport const setCurrentSpeed = (val) => {\r\n  return {\r\n    type: 'SET_SPEED',\r\n    payload: val,\r\n  };\r\n};\r\n\r\n//\r\nexport const setCurrentMergeFocused = (arr) => {\r\n  return {\r\n    type: 'SET_CURRENT_MERGE_FOCUSED',\r\n    payload: arr,\r\n  };\r\n};\r\n\r\nexport const setCurrentQuickFocused = (arr) => {\r\n  return {\r\n    type: 'SET_CURRENT_QUICK_FOCUSED',\r\n    payload: arr,\r\n  };\r\n};\r\n\r\nexport const setCurrentPivot = (val) => {\r\n  return {\r\n    type: 'SET_CURRENT_PIVOT',\r\n    payload: val,\r\n  };\r\n};\r\n\r\nexport const setCurrentHeapFocused = (arr) => {\r\n  return {\r\n    type: 'SET_CURRENT_HEAP_FOCUSED',\r\n    payload: arr,\r\n  };\r\n};\r\n\r\nexport const setCurrentSelectionFocused = (arr) => {\r\n  return {\r\n    type: 'SET_CURRENT_SELECTION_FOCUSED',\r\n    payload: arr,\r\n  };\r\n};\r\n\r\nexport const setCurrentSelectionMin = (val) => {\r\n  return {\r\n    type: 'SET_CURRENT_SELECTION_MIN',\r\n    payload: val,\r\n  };\r\n};\r\n\r\nexport const setCurrentInsertionShifter = (val) => {\r\n  return {\r\n    type: 'SET_CURRENT_INSERTION_SHIFTER',\r\n    payload: val,\r\n  };\r\n};\r\n\r\nexport const setIsPaused = (val) => {\r\n  return {\r\n    type: 'SET_IS_PAUSED',\r\n    payload: val,\r\n  };\r\n};\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setCurrentAlgorithm } from '../actionCreators';\r\nimport '../styles/controlBar.css';\r\n\r\nconst Dropdown = (props) => {\r\n  // Keep track of whether or no menu is dropped down or not\r\n  const [open, setOpen] = useState(false);\r\n  // keep track of element\r\n  const ref = useRef();\r\n\r\n  // used to expand of colapse menu when clicking outside meny\r\n  useEffect(() => {\r\n    const onBodyClick = (event) => {\r\n      if (ref.current && ref.current.contains(event.target)) {\r\n        return;\r\n      }\r\n\r\n      setOpen(false);\r\n    };\r\n\r\n    document.body.addEventListener('click', onBodyClick);\r\n\r\n    return () => {\r\n      document.body.removeEventListener('click', onBodyClick);\r\n    };\r\n  }, []);\r\n\r\n  // used to map out the algOptions to options in menu\r\n  const renderedOptions = props.options.map((option) => {\r\n    if (option.value === props.currenAlgorithm) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div\r\n        key={option.value}\r\n        className=\"item\"\r\n        onClick={() => props.changeCurrentAlgorithm(option.value)}\r\n      >\r\n        {option.label}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div ref={ref} id=\"dropdown\" className=\"ui form\">\r\n      <div className=\"field\">\r\n        <label className=\"label\"> {props.label}</label>\r\n        <div\r\n          onClick={() => setOpen(!open)}\r\n          className={`ui selection dropdown ${open ? 'visible active' : ''}`}\r\n        >\r\n          <i className=\"dropdown icon\"> </i>\r\n          <div className=\"text\">\r\n            {\r\n              props.options.find(\r\n                (element) => element.value === props.currentAlgorithm\r\n              ).label\r\n            }\r\n          </div>\r\n          <div className={`menu ${open ? 'visible transition' : ''}`}>\r\n            {renderedOptions}{' '}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ currentAlgorithm }) => ({\r\n  currentAlgorithm: currentAlgorithm,\r\n});\r\n\r\nconst mapDispatchToProps = () => (dispatch) => ({\r\n  changeCurrentAlgorithm: (alg) => {\r\n    dispatch(setCurrentAlgorithm(alg));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dropdown);\r\n","//Import action creators to handle updating array visual\r\nimport {\r\n  setCurrentSwappers,\r\n  setArray,\r\n  setCurrentBubbleFocused,\r\n  setCurrentSorted,\r\n  setIsRunning,\r\n} from '../actionCreators';\r\n\r\n// Speed at which final frame updates\r\n\r\n// Function sorts array and creates array of frames to be rendered\r\n//TODO: Evaluate if speed param is still needed\r\n\r\nconst bubbleSort = (stateArr, dispatch, speed, getSpeed, getIsRunning) => {\r\n  // New array as to avoid mutating the original state\r\n  let arr = stateArr.slice(0);\r\n  // Array to hold 'frames' to be rendered\r\n  let frames = [];\r\n  let sorted = false;\r\n  let iteration = 0;\r\n\r\n  // Bubble sort algorithm\r\n  while (!sorted) {\r\n    sorted = true;\r\n    for (let i = 0; i < arr.length - 1 - iteration; i++) {\r\n      // Push current elements being considered for swap\r\n      frames.push([i, i + 1]);\r\n      if (arr[i] > arr[i + 1]) {\r\n        // Push a frame that represents that these will be highlighted for swapping\r\n        frames.push([i, i + 1, true]);\r\n        let temp = arr[i];\r\n        arr[i] = arr[i + 1];\r\n        arr[i + 1] = temp;\r\n        sorted = false;\r\n        // Push the updated array as a frame to render\r\n        frames.push(arr.slice(0));\r\n        // Push an empty to frame\r\n        frames.push([]);\r\n      }\r\n    }\r\n    // Push a frame that represents that the\r\n    // element at the given index is in its final place\r\n    frames.push([true, arr.length - 1 - iteration]);\r\n    iteration++;\r\n  }\r\n  setTimeout(() => {\r\n    dispatchFrames(frames, dispatch, arr, speed, getSpeed, getIsRunning);\r\n    return arr;\r\n  }, 100);\r\n};\r\n\r\n// Function recursively calls itself while dispatching frames to be rendered with\r\n// a pause of 'speed' time inbetween.\r\n\r\nconst dispatchFrames = (\r\n  frames,\r\n  dispatch,\r\n  arr,\r\n  speed,\r\n  getSpeed,\r\n  getIsRunning\r\n) => {\r\n  /*\r\n    TODO: \r\n    \r\n   pause functionality\r\n    */\r\n  if (!getIsRunning()) {\r\n    dispatch(setCurrentBubbleFocused([]));\r\n    dispatch(setCurrentSwappers([]));\r\n    dispatch(setCurrentSorted([]));\r\n\r\n    return;\r\n  }\r\n  // Frames is empty and array is sorted\r\n  speed = getSpeed();\r\n\r\n  if (!frames.length) {\r\n    // Dispatch a frame of all to show that all are sorted\r\n    dispatch(setCurrentBubbleFocused(arr.map((val, index) => index)));\r\n    // Using timeout dispatch cleanup\r\n    setTimeout(() => {\r\n      // remove highlighting from all elements because algorithm has terminated\r\n      dispatch(setCurrentBubbleFocused([]));\r\n      // revert all elements to be highlighted as sorted\r\n      dispatch(setCurrentSorted(arr.map((num, index) => index)));\r\n      // revert isRunning to false as sorting has terminated\r\n      dispatch(setIsRunning(false));\r\n    }, speed);\r\n    return;\r\n  }\r\n  // Frames is empty\r\n\r\n  // Determine the dispatch function to call the frames with\r\n  let dispatchFunc = null;\r\n  const leadingFrameLen = frames[0].length;\r\n  // If length is greater than 3 then this frame represents the entire array\r\n  if (leadingFrameLen > 3) {\r\n    dispatchFunc = setArray;\r\n  }\r\n  // If length is 3 or 0 then this frame represents the elements that will swap\r\n  // a frame of length 0 meaning that no frames will swap at this iteration\r\n  else if (leadingFrameLen === 3 || leadingFrameLen === 0) {\r\n    dispatchFunc = setCurrentSwappers;\r\n  }\r\n  // If frame is length 2 and contains boolean in first position then this element\r\n  // is to be added to the portion of elements in their final sorted position\r\n  else if (leadingFrameLen === 2 && typeof frames[0][0] === 'boolean') {\r\n    dispatchFunc = setCurrentSorted;\r\n  }\r\n  // Else this frame if of length 2 and contains two elements that are being focused\r\n  else {\r\n    dispatchFunc = setCurrentBubbleFocused;\r\n  }\r\n\r\n  // Dispatch the leading frame and pop it off the frame list\r\n  dispatch(dispatchFunc(frames.shift()));\r\n\r\n  // Recursively call dispatchFrames with updated frames after specified time\r\n  setTimeout(() => {\r\n    dispatchFrames(frames, dispatch, arr, speed, getSpeed, getIsRunning);\r\n  }, speed);\r\n};\r\n\r\nexport default bubbleSort;\r\n","import {\r\n  setArray,\r\n  setCurrentMergeFocused,\r\n  setCurrentSwappers,\r\n  setIsRunning,\r\n  setCurrentSorted,\r\n} from '../actionCreators';\r\n\r\nfunction mergeSort(stateArray, dispatch, speed, getSpeed, getIsRunning) {\r\n  let array = stateArray.slice(0),\r\n    frames = [];\r\n  let finalArray = mergeSortHelper(\r\n    array.map((num, idx) => [num, idx]),\r\n    frames,\r\n    0,\r\n    array.length - 1,\r\n    { array: array.slice(0) }\r\n  );\r\n  setTimeout(() => {\r\n    handleDispatch(frames, dispatch, finalArray, speed, getSpeed, getIsRunning);\r\n  }, 100);\r\n}\r\n\r\nfunction mergeSortHelper(array, frames, start, end, obj) {\r\n  if (array.length === 1) {\r\n    return array;\r\n  }\r\n  let half = Math.floor(array.length / 2),\r\n    first = array.slice(0, half),\r\n    second = array.slice(half),\r\n    indexHalf = Math.floor((end + 1 + start) / 2),\r\n    actualFirst = mergeSortHelper(first, frames, start, indexHalf - 1, obj),\r\n    actualSecond = mergeSortHelper(second, frames, indexHalf, end, obj),\r\n    isFinalMerge = false;\r\n  if (actualFirst.length + actualSecond.length === obj.array.length)\r\n    isFinalMerge = true;\r\n  return actualSort(\r\n    actualFirst,\r\n    actualSecond,\r\n    frames,\r\n    obj,\r\n    start,\r\n    end,\r\n    isFinalMerge\r\n  );\r\n}\r\n\r\nfunction actualSort(first, second, frames, obj, start, end, isFinalMerge) {\r\n  let sortedArray = [];\r\n  let indexToPush = start;\r\n  while (first.length && second.length) {\r\n    frames.push([first[0][1], second[0][1]]);\r\n    if (first[0][0] <= second[0][0]) {\r\n      indexToPush++;\r\n      sortedArray.push(first.shift());\r\n    } else {\r\n      frames.push([first[0][1], second[0][1], true]);\r\n      second[0][1] = indexToPush++;\r\n      sortedArray.push(second.shift());\r\n      first.forEach((subArr) => subArr[1]++);\r\n      if (start === 0) {\r\n        obj.array = sortedArray\r\n          .map((subArr) => subArr[0])\r\n          .concat(first.map((subArr) => subArr[0]))\r\n          .concat(second.map((subArr) => subArr[0]))\r\n          .concat(obj.array.slice(end + 1));\r\n      } else {\r\n        obj.array = obj.array\r\n          .slice(0, start)\r\n          .concat(sortedArray.map((subArr) => subArr[0]))\r\n          .concat(first.map((subArr) => subArr[0]))\r\n          .concat(second.map((subArr) => subArr[0]))\r\n          .concat(obj.array.slice(end + 1));\r\n      }\r\n      frames.push(obj.array.concat([indexToPush - 1, indexToPush]));\r\n      frames.push([]);\r\n    }\r\n    if (isFinalMerge) frames.push([true, indexToPush - 1]);\r\n  }\r\n  return sortedArray.concat(first).concat(second);\r\n}\r\n\r\nfunction handleDispatch(\r\n  frames,\r\n  dispatch,\r\n  array,\r\n  speed,\r\n  getSpeed,\r\n  getIsRunning\r\n) {\r\n  if (!getIsRunning()) {\r\n    dispatch(setCurrentMergeFocused([]));\r\n    dispatch(setCurrentSwappers([]));\r\n    dispatch(setCurrentSorted([]));\r\n\r\n    return;\r\n  }\r\n  speed = getSpeed();\r\n  if (!frames.length) {\r\n    dispatch(setCurrentMergeFocused(array.map((num, index) => index)));\r\n    setTimeout(() => {\r\n      dispatch(setCurrentMergeFocused([]));\r\n      dispatch(setCurrentSorted(array.map((num, index) => index)));\r\n      dispatch(setIsRunning(false));\r\n    }, 900);\r\n    return;\r\n  }\r\n  let dispatchFunction =\r\n    frames[0].length > 3\r\n      ? setArray\r\n      : (frames[0].length === 3 && typeof frames[0][2] === 'boolean') ||\r\n        frames[0].length === 0\r\n      ? setCurrentSwappers\r\n      : frames[0].length === 2 && typeof frames[0][0] === 'boolean'\r\n      ? setCurrentSorted\r\n      : setCurrentMergeFocused;\r\n  if (dispatchFunction === setArray) {\r\n    let currentframes = frames.shift();\r\n    dispatch(\r\n      dispatchFunction(currentframes.slice(0, currentframes.length - 2))\r\n    );\r\n    dispatch(setCurrentSwappers([]));\r\n    dispatch(setCurrentMergeFocused([]));\r\n    dispatch(\r\n      setCurrentSwappers([\r\n        currentframes[currentframes.length - 2],\r\n        currentframes[currentframes.length - 1],\r\n      ])\r\n    );\r\n    dispatch(\r\n      setCurrentMergeFocused([\r\n        currentframes[currentframes.length - 2],\r\n        currentframes[currentframes.length - 1],\r\n      ])\r\n    );\r\n  } else {\r\n    dispatch(dispatchFunction(frames.shift()));\r\n  }\r\n  setTimeout(() => {\r\n    handleDispatch(frames, dispatch, array, speed, getSpeed, getIsRunning);\r\n  }, speed);\r\n}\r\n\r\nexport default mergeSort;\r\n","import {\r\n  setCurrentSwappers,\r\n  setArray,\r\n  setCurrentQuickFocused,\r\n  setCurrentPivot,\r\n  setCurrentSorted,\r\n  setIsRunning,\r\n} from '../actionCreators';\r\n\r\nfunction quickSort(stateArray, dispatch, speed, getSpeed, getIsRunning) {\r\n  let array = stateArray.slice(0),\r\n    frames = [];\r\n  quickSortHelper(array, 0, array.length - 1, frames);\r\n\r\n  setTimeout(() => {\r\n    dispatchFrames(frames, dispatch, array, speed, getSpeed, getIsRunning);\r\n    return array;\r\n  }, 100);\r\n}\r\n\r\nfunction quickSortHelper(array, start, end, frames) {\r\n  if (start >= end) {\r\n    frames.push([true, start]);\r\n    return;\r\n  }\r\n  let pivot = start,\r\n    left = start + 1,\r\n    right = end;\r\n  frames.push(pivot);\r\n  frames.push([left, right]);\r\n  while (right >= left) {\r\n    if (array[right] < array[pivot] && array[left] > array[pivot]) {\r\n      frames.push([left, right, true]);\r\n      let temp = array[right];\r\n      array[right] = array[left];\r\n      array[left] = temp;\r\n      frames.push(array.slice(0));\r\n      frames.push([]);\r\n    }\r\n    if (array[right] >= array[pivot]) {\r\n      right--;\r\n    }\r\n    if (array[left] <= array[pivot]) {\r\n      left++;\r\n    }\r\n    if (right >= left) frames.push([left, right]);\r\n  }\r\n  frames.push([pivot, right]);\r\n  if (pivot !== right) {\r\n    let temp = array[right];\r\n    array[right] = array[pivot];\r\n    array[pivot] = temp;\r\n    frames.push([pivot, right, true]);\r\n    frames.push(array.slice(0));\r\n    frames.push([]);\r\n    frames.push([true, right]);\r\n  }\r\n  quickSortHelper(array, start, right - 1, frames);\r\n  quickSortHelper(array, right + 1, end, frames);\r\n}\r\n\r\nfunction dispatchFrames(\r\n  frames,\r\n  dispatch,\r\n  array,\r\n  speed,\r\n  getSpeed,\r\n  getIsRunning\r\n) {\r\n  if (!getIsRunning()) {\r\n    dispatch(setCurrentQuickFocused([]));\r\n    dispatch(setCurrentPivot(null));\r\n    dispatch(setCurrentSwappers([]));\r\n    dispatch(setCurrentSorted([]));\r\n\r\n    return;\r\n  }\r\n  // Frames is empty and array is sorted\r\n  speed = getSpeed();\r\n\r\n  if (!frames.length) {\r\n    dispatch(setCurrentPivot(null));\r\n    dispatch(setCurrentQuickFocused(array.map((num, index) => index)));\r\n    setTimeout(() => {\r\n      dispatch(setCurrentQuickFocused([]));\r\n      dispatch(setIsRunning(false));\r\n    }, 900);\r\n    return;\r\n  }\r\n  let dispatchFunc = !(frames[0] instanceof Array)\r\n    ? setCurrentPivot\r\n    : frames[0].length > 3\r\n    ? setArray\r\n    : frames[0].length !== 2\r\n    ? setCurrentSwappers\r\n    : frames[0].length === 2 && typeof frames[0][0] === 'boolean'\r\n    ? setCurrentSorted\r\n    : setCurrentQuickFocused;\r\n  dispatch(dispatchFunc(frames.shift()));\r\n  if (dispatchFunc === setCurrentPivot)\r\n    dispatch(setCurrentQuickFocused(frames.shift()));\r\n  setTimeout(() => {\r\n    dispatchFrames(frames, dispatch, array, speed, getSpeed, getIsRunning);\r\n  }, speed);\r\n}\r\n\r\nexport default quickSort;\r\n","import {\r\n  setCurrentSwappers,\r\n  setArray,\r\n  setCurrentHeapFocused,\r\n  setCurrentSorted,\r\n  setIsRunning,\r\n} from '../actionCreators';\r\n\r\nfunction heapSort(arr, dispatch, speed, getSpeed, getIsRunning) {\r\n  let array = arr.slice(0),\r\n    frames = [];\r\n  buildMaxHeap(array, frames);\r\n  let end = array.length - 1;\r\n  while (end > 0) {\r\n    frames.push([0, end]);\r\n    let temp = array[end];\r\n    array[end] = array[0];\r\n    array[0] = temp;\r\n    frames.push([0, end, true]);\r\n    frames.push(array.slice(0));\r\n    frames.push([]);\r\n    frames.push([true, end]);\r\n    siftDown(array, 0, end, frames);\r\n    end--;\r\n  }\r\n  frames.push([true, end]);\r\n  setTimeout(() => {\r\n    dispatchFrames(frames, dispatch, array, speed, getSpeed, getIsRunning);\r\n    return array;\r\n  }, speed);\r\n}\r\n\r\nfunction buildMaxHeap(array, frames) {\r\n  let currentIndex = Math.floor(array.length / 2);\r\n  while (currentIndex >= 0) {\r\n    siftDown(array, currentIndex, array.length, frames);\r\n    currentIndex--;\r\n  }\r\n}\r\n\r\nfunction siftDown(array, start, end, frames) {\r\n  if (start >= Math.floor(end / 2)) {\r\n    return;\r\n  }\r\n  let left = start * 2 + 1,\r\n    right = start * 2 + 2 < end ? start * 2 + 2 : null,\r\n    swap;\r\n  if (right) {\r\n    frames.push([start, left, right]);\r\n    swap = array[left] > array[right] ? left : right;\r\n  } else {\r\n    frames.push([start, left]);\r\n    swap = left;\r\n  }\r\n  if (array[start] < array[swap]) {\r\n    let temp = array[swap];\r\n    array[swap] = array[start];\r\n    array[start] = temp;\r\n    frames.push([start, swap, true]);\r\n    frames.push(array.slice(0));\r\n    frames.push([]);\r\n    siftDown(array, swap, end, frames);\r\n  }\r\n}\r\n\r\nfunction dispatchFrames(\r\n  frames,\r\n  dispatch,\r\n  array,\r\n  speed,\r\n  getSpeed,\r\n  getIsRunning\r\n) {\r\n  if (!getIsRunning()) {\r\n    dispatch(setCurrentHeapFocused([]));\r\n    dispatch(setCurrentSwappers([]));\r\n    dispatch(setCurrentSorted([]));\r\n\r\n    return;\r\n  }\r\n  // Frames is empty and array is sorted\r\n  speed = getSpeed();\r\n  if (!frames.length) {\r\n    dispatch(setCurrentHeapFocused(array.map((num, index) => index)));\r\n    setTimeout(() => {\r\n      dispatch(setCurrentHeapFocused([]));\r\n      dispatch(setIsRunning(false));\r\n    }, speed);\r\n    return;\r\n  }\r\n  let dispatchFunction =\r\n    frames[0].length > 3\r\n      ? setArray\r\n      : (frames[0].length === 3 && typeof frames[0][2] === 'boolean') ||\r\n        !frames[0].length\r\n      ? setCurrentSwappers\r\n      : frames[0].length === 2 && typeof frames[0][0] === 'boolean'\r\n      ? setCurrentSorted\r\n      : setCurrentHeapFocused;\r\n  dispatch(dispatchFunction(frames.shift()));\r\n  setTimeout(() => {\r\n    dispatchFrames(frames, dispatch, array, speed, getSpeed, getIsRunning);\r\n  }, speed);\r\n}\r\n\r\nexport default heapSort;\r\n","import {\r\n  setCurrentSwappers,\r\n  setArray,\r\n  setCurrentSelectionFocused,\r\n  setCurrentSorted,\r\n  setIsRunning,\r\n  setCurrentInsertionShifter,\r\n} from '../actionCreators';\r\n/*\r\nTypes: shift\r\n\r\n*/\r\nconst insertionSort = (stateArr, dispatch, speed, getSpeed, getIsRunning) => {\r\n  let array = stateArr.slice(0);\r\n  let frames = [];\r\n\r\n  // go through each element in array starting at index 1\r\n  for (let i = 1; i < array.length; i++) {\r\n    // push a frame showing the current index that holds the element to be shifted\r\n    frames.push(['shift', i, array.slice(0)]);\r\n    let j = i - 1;\r\n    let key = array[i];\r\n    // while element is larger than element to it's left, keep swapping\r\n    frames.push(['focus', [j]]);\r\n    let skip = j;\r\n    while (j >= 0 && array[j] > key) {\r\n      frames.push(['swap', [j]]);\r\n      array[j + 1] = array[j];\r\n      array[j] = key;\r\n\r\n      frames.push(['shift', j, array.slice(0)]);\r\n      j--;\r\n      if (j >= 0) frames.push(['focus', [j]]);\r\n    }\r\n    array[j + 1] = key;\r\n    frames.push(['empty']);\r\n  }\r\n  frames.push(['final', array.slice(0)]);\r\n\r\n  console.log(array);\r\n  setTimeout(() => {\r\n    dispatchFrames(frames, dispatch, array, speed, getSpeed, getIsRunning);\r\n    return array;\r\n  }, 100);\r\n};\r\n\r\nconst dispatchFrames = (\r\n  frames,\r\n  dispatch,\r\n  arr,\r\n  speed,\r\n  getSpeed,\r\n  getIsRunning\r\n) => {\r\n  if (!getIsRunning()) {\r\n    dispatch(setCurrentSelectionFocused([]));\r\n    dispatch(setCurrentSwappers([]));\r\n    dispatch(setCurrentSorted([]));\r\n    dispatch(setCurrentInsertionShifter(null));\r\n    dispatch(setIsRunning(false));\r\n    return;\r\n  }\r\n  speed = getSpeed();\r\n  if (!frames.length) {\r\n    dispatch(setCurrentSelectionFocused(arr.map((val, index) => index)));\r\n\r\n    setTimeout(() => {\r\n      dispatch(setCurrentSelectionFocused([]));\r\n      dispatch(setCurrentSorted(arr.map((num, index) => index)));\r\n      dispatch(setCurrentInsertionShifter(null));\r\n      dispatch(setCurrentSwappers([]));\r\n      dispatch(setIsRunning(false));\r\n    }, speed);\r\n    return;\r\n  }\r\n  // min focus swap arr empy\r\n  let dispatchFunc = null;\r\n  const method = frames[0][0];\r\n  let outFrame = [];\r\n  //frame represents whole array\r\n  if (method === 'swap') {\r\n    outFrame = frames[0][1];\r\n    dispatch(setCurrentSelectionFocused([]));\r\n    dispatchFunc = setCurrentSwappers;\r\n  } else if (method === 'shift') {\r\n    outFrame = frames[0][1];\r\n    dispatchFunc = setCurrentInsertionShifter;\r\n    dispatch(setArray(frames[0][2]));\r\n    dispatch(setCurrentSwappers([]));\r\n  } else if (method === 'focus') {\r\n    outFrame = frames[0][1];\r\n    dispatchFunc = setCurrentSelectionFocused;\r\n  } else if (method === 'final') {\r\n    outFrame.push(frames[0][1]);\r\n    dispatchFunc = setCurrentSorted;\r\n  } else if (method === 'empty') {\r\n    dispatchFunc = setCurrentSwappers;\r\n    dispatch(setCurrentSelectionFocused([]));\r\n    dispatch(setCurrentSwappers([]));\r\n    dispatch(setCurrentInsertionShifter(null));\r\n  }\r\n\r\n  // Dispatch the leading frame and pop it off the frame list\r\n  dispatch(dispatchFunc(outFrame));\r\n\r\n  // Recursively call dispatchFrames with updated frames after specified time\r\n  frames.shift();\r\n  setTimeout(() => {\r\n    dispatchFrames(frames, dispatch, arr, speed, getSpeed, getIsRunning);\r\n  }, speed);\r\n};\r\n\r\nexport default insertionSort;\r\n","import {\r\n  setCurrentSwappers,\r\n  setArray,\r\n  setCurrentSelectionFocused,\r\n  setCurrentSorted,\r\n  setIsRunning,\r\n  setCurrentSelectionMin,\r\n} from '../actionCreators';\r\n\r\nconst selectionSort = (stateArr, dispatch, speed, getSpeed, getIsRunning) => {\r\n  let array = stateArr.slice(0);\r\n  let frames = [];\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    let minIndex = i;\r\n    frames.push(['min', minIndex]);\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      frames.push(['focus', j]);\r\n      if (array[minIndex] > array[j]) {\r\n        minIndex = j;\r\n        frames.push(['min', minIndex]);\r\n      }\r\n    }\r\n\r\n    if (minIndex !== i) {\r\n      frames.push(['swap', minIndex, i]);\r\n      let temp = array[i];\r\n      array[i] = array[minIndex];\r\n      array[minIndex] = temp;\r\n      frames.push(['arr', array.slice(0)]);\r\n      frames.push(['empty']);\r\n    }\r\n\r\n    frames.push(['final', i]);\r\n  }\r\n  setTimeout(() => {\r\n    dispatchFrames(frames, dispatch, array, speed, getSpeed, getIsRunning);\r\n    return array;\r\n  }, 100);\r\n};\r\n\r\nconst dispatchFrames = (\r\n  frames,\r\n  dispatch,\r\n  arr,\r\n  speed,\r\n  getSpeed,\r\n  getIsRunning\r\n) => {\r\n  if (!getIsRunning()) {\r\n    dispatch(setCurrentSelectionFocused([]));\r\n    dispatch(setCurrentSwappers([]));\r\n    dispatch(setCurrentSorted([]));\r\n    dispatch(setCurrentSelectionMin(null));\r\n    dispatch(setIsRunning(false));\r\n    return;\r\n  }\r\n  speed = getSpeed();\r\n  if (!frames.length) {\r\n    dispatch(setCurrentSelectionFocused(arr.map((val, index) => index)));\r\n\r\n    setTimeout(() => {\r\n      dispatch(setCurrentSelectionFocused([]));\r\n      dispatch(setCurrentSorted(arr.map((num, index) => index)));\r\n      dispatch(setCurrentSelectionMin(null));\r\n      dispatch(setCurrentSwappers([]));\r\n      dispatch(setIsRunning(false));\r\n    }, speed);\r\n    return;\r\n  }\r\n  // min focus swap arr empy\r\n  let dispatchFunc = null;\r\n  const method = frames[0][0];\r\n\r\n  let outFrame = [];\r\n  //frame represents whole array\r\n  if (method === 'arr') {\r\n    outFrame = frames[0][1];\r\n    dispatchFunc = setArray;\r\n  } else if (method === 'swap') {\r\n    outFrame.push(frames[0][1], frames[0][2]);\r\n    dispatchFunc = setCurrentSwappers;\r\n  } else if (method === 'min') {\r\n    outFrame = frames[0][1];\r\n    dispatch(setCurrentSelectionFocused([]));\r\n    dispatchFunc = setCurrentSelectionMin;\r\n  } else if (method === 'focus') {\r\n    outFrame.push(frames[0][1]);\r\n    dispatchFunc = setCurrentSelectionFocused;\r\n  } else if (method === 'final') {\r\n    outFrame.push(frames[0][1]);\r\n    dispatchFunc = setCurrentSorted;\r\n  } else if (method !== 'empty') {\r\n    console.log('Error Selection Sort - Method:', method);\r\n  } else {\r\n    dispatchFunc = setCurrentSwappers;\r\n  }\r\n\r\n  // Dispatch the leading frame and pop it off the frame list\r\n  dispatch(dispatchFunc(outFrame));\r\n\r\n  // Recursively call dispatchFrames with updated frames after specified time\r\n  frames.shift();\r\n  setTimeout(() => {\r\n    dispatchFrames(frames, dispatch, arr, speed, getSpeed, getIsRunning);\r\n  }, speed);\r\n};\r\nexport default selectionSort;\r\n","import React, { Suspense, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/controlBar.css';\r\nimport Dropdown from './Dropdown';\r\n\r\nimport {\r\n  setArray,\r\n  setCurrentAlgorithm,\r\n  setCurrentSorted,\r\n  setIsRunning,\r\n  setCurrentSpeed,\r\n  setIsPaused,\r\n} from '../actionCreators';\r\nimport bubbleSort from '../algorithms/bubbleSort';\r\nimport mergeSort from '../algorithms/mergeSort';\r\nimport quickSort from '../algorithms/quickSort';\r\nimport heapSort from '../algorithms/heapSort';\r\nimport insertionSort from '../algorithms/insertionSort';\r\nimport selectionSort from '../algorithms/selectionSort';\r\n\r\n//Import action creators\r\nconst algOptions = [\r\n  {\r\n    label: 'Bubble Sort',\r\n    value: 'bubbleSort',\r\n  },\r\n  {\r\n    label: 'Selection Sort',\r\n    value: 'selectionSort',\r\n  },\r\n  {\r\n    label: 'Insertion Sort',\r\n    value: 'insertionSort',\r\n  },\r\n  {\r\n    label: 'Heap Sort',\r\n    value: 'heapSort',\r\n  },\r\n  {\r\n    label: 'Merge Sort',\r\n    value: 'mergeSort',\r\n  },\r\n  {\r\n    label: 'Quick Sort',\r\n    value: 'quickSort',\r\n  },\r\n];\r\n\r\nconst algDescriptions = [\r\n  {\r\n    key: 'bubbleSort',\r\n    desc: `Bubble Sort: Steps through array, comparing \r\n      adjacent elements and swapping elements incorrectly\r\n       ordered.This leads to an effect where the largest \r\n       remaining element is \"bubbled\" to the end of the \r\n       array every iteration`,\r\n    complexity: 'sq',\r\n  },\r\n  {\r\n    key: 'selectionSort',\r\n    desc: `Selection Sort: Selects the smallest remaining element \r\n    at every iteration and swaps it to the front of the array`,\r\n    complexity: 'sq',\r\n  },\r\n  {\r\n    key: 'insertionSort',\r\n    desc: `Insertion Sort: Inserts the smallest remaining element in the\r\n    array at it's final sorted position at every iteration`,\r\n    complexity: 'sq',\r\n  },\r\n  {\r\n    key: 'heapSort',\r\n    desc: `Heap Sort: Build a max heap out of the remaining array, select the root\r\n    node which is now the largest element, reheapify the remaining array`,\r\n    complexity: 'log',\r\n  },\r\n  {\r\n    key: 'mergeSort',\r\n    desc: `Merge Sort: Recursively divides array in half, and then merges halves \r\n    together is sorted order `,\r\n    complexity: 'log',\r\n  },\r\n  {\r\n    key: 'quickSort',\r\n    desc: `Quick Sort: Select an element as the pivot element, place all smaller elements\r\n    before pivot and all larger elements after pivot, recursively quick sort two partitions`,\r\n    complexity: 'log',\r\n  },\r\n];\r\n\r\nclass ControlBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.callbackChangeSpeedBound = this.callbackChangeSpeed.bind(this);\r\n    this.callbackIsRunningBound = this.callbackIsRunning.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.props.generateNewArray();\r\n  }\r\n\r\n  callbackChangeSpeed() {\r\n    return this.props.speed;\r\n  }\r\n\r\n  callbackIsRunning() {\r\n    return this.props.isRunning;\r\n  }\r\n  render() {\r\n    const {\r\n      array,\r\n      currentAlgorithm,\r\n      startSort,\r\n      cancelSort,\r\n      generateNewArray,\r\n      changeCurrentAlgorithm,\r\n      changeSpeed,\r\n      isRunning,\r\n      speed,\r\n      pauseSort,\r\n      isPaused,\r\n    } = this.props;\r\n    // TODO: Not sure if speed should be here and how is should be calculated\r\n\r\n    // TODO: Play with colors\r\n    return (\r\n      <div className=\"container\" id=\"controlBar\">\r\n        <div className=\"row\">\r\n          <div id=\"dropdown\" className=\"col-3\">\r\n            <Dropdown\r\n              label=\"Select Sorting Algorithm\"\r\n              options={algOptions}\r\n            ></Dropdown>\r\n          </div>\r\n          <div className=\"col-4\" id=\"algDescription\">\r\n            <p>\r\n              {\r\n                algDescriptions.find(\r\n                  (element) => element.key === currentAlgorithm\r\n                ).desc\r\n              }\r\n            </p>\r\n\r\n            {algDescriptions.find((element) => element.key === currentAlgorithm)\r\n              .complexity === 'sq' ? (\r\n              <p>\r\n                O(N<sup>2</sup>)\r\n              </p>\r\n            ) : (\r\n              <p>O(N LogN)</p>\r\n            )}\r\n          </div>\r\n          <div className=\"col-3\">\r\n            <div id=\"generateNewArrayBtn\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-primary\"\r\n                disabled={isRunning ? 'disabled' : null}\r\n                onClick={() => {\r\n                  generateNewArray(array.length);\r\n                }}\r\n              >\r\n                Generate New Array\r\n              </button>\r\n            </div>\r\n            <form>\r\n              <div id=\"speedRangeContainer\" className=\"form-group\">\r\n                <label htmlFor=\"formControlRange\" id=\"speedRangeLabel\">\r\n                  Set Speed (Can change mid sort)\r\n                </label>\r\n\r\n                {\r\n                  <input\r\n                    className=\"form-control-range\"\r\n                    id=\"formControlRange\"\r\n                    type=\"range\"\r\n                    min=\"1\"\r\n                    max=\"2000\"\r\n                    value={speed}\r\n                    //disabled={isRunning ? 'disabled' : null}\r\n                    onChange={(event) =>\r\n                      changeSpeed(event.target.valueAsNumber)\r\n                    }\r\n                  />\r\n                }\r\n                <label>{`${speed}ms`}</label>\r\n              </div>\r\n            </form>\r\n            <form>\r\n              <div id=\"sizeRangeContainer\" className=\"form-group\">\r\n                <label htmlFor=\"formControlRange\" id=\"sizeRangeLabel\">\r\n                  Set Array Size\r\n                </label>\r\n\r\n                {\r\n                  <input\r\n                    className=\"form-control-range\"\r\n                    id=\"sizeRangeInput\"\r\n                    type=\"range\"\r\n                    min=\"4\"\r\n                    max=\"125\"\r\n                    value={array.length}\r\n                    disabled={isRunning ? 'disabled' : null}\r\n                    onChange={(event) =>\r\n                      generateNewArray(event.target.valueAsNumber)\r\n                    }\r\n                  />\r\n                }\r\n                <label>{`${array.length} elements`}</label>\r\n              </div>\r\n            </form>\r\n          </div>\r\n\r\n          <div className=\"col-2\">\r\n            <button\r\n              id=\"startBtn\"\r\n              type=\"button\"\r\n              className=\"btn btn-outline-success\"\r\n              disabled={isRunning ? 'disabled' : null}\r\n              onClick={() => {\r\n                startSort(\r\n                  currentAlgorithm,\r\n                  array,\r\n                  speed,\r\n                  this.callbackChangeSpeedBound,\r\n                  this.callbackIsRunningBound\r\n                );\r\n              }}\r\n            >\r\n              Start Sort\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-danger\"\r\n              onClick={() => cancelSort()}\r\n            >\r\n              Cancel Sort\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  array,\r\n  currentAlgorithm,\r\n  isRunning,\r\n  speed,\r\n  isPaused,\r\n}) => ({\r\n  array,\r\n  currentAlgorithm,\r\n  isRunning,\r\n  speed,\r\n  isPaused,\r\n});\r\n\r\n// action creators that dispatch info to be caught by reducers\r\nconst mapDispatchToProps = () => (dispatch, ownProps) => ({\r\n  changeCurrentAlgorithm: (alg) => {\r\n    dispatch(setCurrentAlgorithm(alg));\r\n  },\r\n  generateNewArray: (len = 20, upperBound = 100, lowerBound = 10) => {\r\n    let randomArr = [];\r\n    // push n random numbers between bounds to randomArr\r\n    for (let i = 0; i < len; i++) {\r\n      let num = Math.floor(Math.random() * upperBound) + lowerBound;\r\n      if (num > upperBound) {\r\n        num = (num % upperBound) + lowerBound;\r\n      }\r\n      randomArr.push(num);\r\n    }\r\n    dispatch(setArray(randomArr));\r\n    dispatch(setCurrentSorted([]));\r\n  },\r\n  startSort: (\r\n    alg = 'bubbleSort',\r\n    arr,\r\n    speed,\r\n    callbackChangeSpeed,\r\n    callbackIsRunning\r\n  ) => {\r\n    // Determine sort to launch\r\n    let sortingAlg =\r\n      alg === 'bubbleSort'\r\n        ? bubbleSort\r\n        : alg === 'quickSort'\r\n        ? quickSort\r\n        : alg === 'heapSort'\r\n        ? heapSort\r\n        : alg === 'mergeSort'\r\n        ? mergeSort\r\n        : alg === 'insertionSort'\r\n        ? insertionSort\r\n        : alg === 'selectionSort'\r\n        ? selectionSort\r\n        : null;\r\n    // Nothing has been sorted so pass nothing\r\n    dispatch(setCurrentSorted([]));\r\n    dispatch(setIsRunning(true));\r\n    // start sorting alg\r\n    sortingAlg(arr, dispatch, speed, callbackChangeSpeed, callbackIsRunning);\r\n  },\r\n  //TODO: add pause resume mechanism maybe, would work differently to cancel sort\r\n  cancelSort: () => {\r\n    dispatch(setIsRunning(false));\r\n  },\r\n  changeSpeed: (val) => {\r\n    dispatch(setCurrentSpeed(val));\r\n  },\r\n  pauseSort: (isPaused) => {\r\n    //if already paused, send code to clearTimeout\r\n    if (isPaused) {\r\n      dispatch(setIsPaused(false));\r\n      console.log('Played');\r\n    } else {\r\n      dispatch(setIsPaused(true));\r\n      console.log('Paused');\r\n    }\r\n    //if not paused, send code to start timeout for 24 hours;\r\n  },\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlBar);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/arrayDisplay.css';\r\n//Import action creators\r\n\r\nclass ArrayDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.yellowColor = '#ffd319';\r\n    this.orangeColor = '#ff901f';\r\n    this.pinkColor = '#ff2975';\r\n    this.lightPurpleColor = '#f222ff';\r\n    this.darkPurpleColor = '#8c1eff';\r\n  }\r\n  renderedArray = () => {\r\n    const {\r\n      array,\r\n      currentBubbleFocused,\r\n      currentSorted,\r\n      currentSwappers,\r\n      currentMergeFocused,\r\n      currentQuickFocused,\r\n      currentPivot,\r\n      currentHeapFocused,\r\n      currentSelectionFocused,\r\n      currentSelectionMin,\r\n      currentInsertionShifter,\r\n    } = this.props;\r\n\r\n    // TODO: make width and margin, fontSize depend on length of array\r\n    const elementWidthVal =\r\n      array.length < 10\r\n        ? 40\r\n        : array.length < 15\r\n        ? 35\r\n        : array.length < 22\r\n        ? 25\r\n        : array.length < 30\r\n        ? 16\r\n        : array.length < 40\r\n        ? 11\r\n        : array.length < 60\r\n        ? 9\r\n        : array.length < 75\r\n        ? 7\r\n        : array.length < 90\r\n        ? 6\r\n        : 4;\r\n    const fontSizeVal =\r\n      array.length < 10\r\n        ? 20\r\n        : array.length < 22\r\n        ? 13\r\n        : array.length < 30\r\n        ? 10\r\n        : array.length < 40\r\n        ? 0\r\n        : 0;\r\n    const borderRadiusVal =\r\n      array.length < 22 ? 4 : array.length < 30 ? 3 : array.length < 70 ? 2 : 1;\r\n    const borderWidthVal = array.length < 30 ? 2 : 0;\r\n    const borderWidth = `${borderWidthVal}px`;\r\n    const borderRadius = `${borderRadiusVal}px`;\r\n    const elementWidth = `${elementWidthVal}px`;\r\n    const margin = `${1}px`;\r\n    const textColor = 'white';\r\n    const fontSize = `${fontSizeVal}px`;\r\n    const yellowColor = '#ffd319';\r\n    const orangeColor = '#ff901f';\r\n    const pinkColor = '#ff2975';\r\n    const lightPurpleColor = '#f222ff';\r\n    const darkPurpleColor = '#8c1eff';\r\n    if (array.length) {\r\n      return array.map((val, index) => {\r\n        let elementColor = this.darkPurpleColor; // purple\r\n\r\n        if (currentSwappers.includes(index)) {\r\n          elementColor = this.orangeColor; // redish pink\r\n        }\r\n        // TODO: This is where we will add currentFocused for other algs\r\n        else if (\r\n          currentMergeFocused.includes(index) ||\r\n          currentBubbleFocused.includes(index) ||\r\n          currentQuickFocused.includes(index) ||\r\n          currentHeapFocused.includes(index) ||\r\n          currentSelectionFocused.includes(index)\r\n        ) {\r\n          elementColor = this.pinkColor; // yellowish orange\r\n        } else if (\r\n          currentPivot === index ||\r\n          currentSelectionMin === index ||\r\n          currentInsertionShifter === index\r\n        ) {\r\n          elementColor = this.yellowColor; // yellowish orange\r\n        }\r\n\r\n        //TODO: logic for pivot\r\n        else if (currentSorted.includes(index)) {\r\n          elementColor = this.lightPurpleColor; // dark blue\r\n        }\r\n        return (\r\n          <div\r\n            className=\"arrayElement\"\r\n            key={index}\r\n            style={{\r\n              height: `${val * 4}px`,\r\n              width: elementWidth,\r\n              marginLeft: margin,\r\n              marginRight: margin,\r\n              backgroundColor: elementColor,\r\n              color: textColor,\r\n              fontSize: fontSize,\r\n              borderRadius: borderRadius,\r\n              borderWidth: borderWidth,\r\n            }}\r\n          >\r\n            {val}\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"container\" id=\"arrayDisplay\">\r\n        <div className=\"row\">\r\n          <div className=\"col-10\" id=\"arrayBody\">\r\n            {this.renderedArray()}\r\n          </div>\r\n          <div className=\"col-2\" id=\"legend\">\r\n            <div className=\"legendBlock\">\r\n              <div\r\n                className=\"colorBlock\"\r\n                style={{ backgroundColor: this.yellowColor }}\r\n              ></div>\r\n              <p>\r\n                <strong style={{ color: this.yellowColor }}>Yellow:</strong> An\r\n                element is a pivot-(Quick Sort), a Min-(Selection Sort), or the\r\n                element being inserted-(Insertion Sort)\r\n              </p>\r\n            </div>\r\n            <div className=\"legendBlock\">\r\n              <div\r\n                className=\"colorBlock\"\r\n                style={{ backgroundColor: this.orangeColor }}\r\n              ></div>\r\n              <p>\r\n                <strong style={{ color: this.orangeColor }}>Orange:</strong> A\r\n                pair of elements will be swapped\r\n              </p>\r\n            </div>\r\n            <div className=\"legendBlock\">\r\n              <div\r\n                className=\"colorBlock\"\r\n                style={{ backgroundColor: this.pinkColor }}\r\n              ></div>\r\n              <p>\r\n                <strong style={{ color: this.pinkColor }}>Pink:</strong> A pair\r\n                of elements is being evaluated\r\n              </p>\r\n            </div>\r\n            <div className=\"legendBlock\">\r\n              <div\r\n                className=\"colorBlock\"\r\n                style={{ backgroundColor: this.lightPurpleColor }}\r\n              ></div>\r\n              <p>\r\n                <strong style={{ color: this.lightPurpleColor }}>\r\n                  Light Purple:\r\n                </strong>{' '}\r\n                An element is in its final position\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"legendBlock\">\r\n              <div\r\n                className=\"colorBlock\"\r\n                style={{ backgroundColor: this.darkPurpleColor }}\r\n              ></div>\r\n              <p>\r\n                <strong style={{ color: this.darkPurpleColor }}>\r\n                  Dark Purple:\r\n                </strong>{' '}\r\n                An element is still unsorted\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  array,\r\n  currentBubbleFocused,\r\n  currentSwappers,\r\n  currentSorted,\r\n  currentMergeFocused,\r\n  currentQuickFocused,\r\n  currentPivot,\r\n  currentHeapFocused,\r\n  currentSelectionFocused,\r\n  currentSelectionMin,\r\n  currentInsertionShifter,\r\n}) => ({\r\n  array,\r\n  currentBubbleFocused,\r\n  currentSwappers,\r\n  currentSorted,\r\n  currentMergeFocused,\r\n  currentQuickFocused,\r\n  currentPivot,\r\n  currentHeapFocused,\r\n  currentSelectionFocused,\r\n  currentSelectionMin,\r\n  currentInsertionShifter,\r\n});\r\nconst mapDispatchToProps = () => (dispatch) => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ArrayDisplay);\r\n","import React from 'react';\r\nimport ControlBar from './ControlBar';\r\nimport ArrayDisplay from './ArrayDisplay';\r\nimport '../styles/controlBar.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div id=\"pageBody\">\r\n      <ControlBar />\r\n      <ArrayDisplay />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","//Top level Index file\r\n\r\n// Library Imports\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n\r\n// Project Component Imports\r\nimport reducers from './reducers/index';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <Provider store={createStore(reducers)}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}