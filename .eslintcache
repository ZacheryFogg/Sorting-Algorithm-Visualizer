[{"C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\index.js":"1","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\reducers\\index.js":"2","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\components\\App.js":"3","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\actionCreators\\index.js":"4","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\components\\ControlBar.js":"5","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\components\\ArrayDisplay.js":"6","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\algorithms\\bubbleSort.js":"7","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\algorithms\\mergeSort.js":"8","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\algorithms\\quickSort.js":"9","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\algorithms\\heapSort.js":"10","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\algorithms\\selectionSort.js":"11","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\algorithms\\insertionSort.js":"12","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\components\\Dropdown.js":"13"},{"size":431,"mtime":1610204651340,"results":"14","hashOfConfig":"15"},{"size":4236,"mtime":1610737068908,"results":"16","hashOfConfig":"15"},{"size":299,"mtime":1610807732693,"results":"17","hashOfConfig":"15"},{"size":2707,"mtime":1610587621964,"results":"18","hashOfConfig":"15"},{"size":9307,"mtime":1610997263870,"results":"19","hashOfConfig":"15"},{"size":6755,"mtime":1610996905433,"results":"20","hashOfConfig":"15"},{"size":4058,"mtime":1610633637648,"results":"21","hashOfConfig":"15"},{"size":4251,"mtime":1610400957042,"results":"22","hashOfConfig":"15"},{"size":2833,"mtime":1610401286874,"results":"23","hashOfConfig":"15"},{"size":2738,"mtime":1610454871223,"results":"24","hashOfConfig":"15"},{"size":3060,"mtime":1610564948122,"results":"25","hashOfConfig":"15"},{"size":3310,"mtime":1610585546980,"results":"26","hashOfConfig":"15"},{"size":2261,"mtime":1610810127908,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1als78",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\index.js",[],["57","58"],"C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\reducers\\index.js",[],"C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\components\\App.js",[],"C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\actionCreators\\index.js",[],"C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\components\\ControlBar.js",["59","60","61","62","63"],"C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\components\\ArrayDisplay.js",["64","65","66","67","68"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/arrayDisplay.css';\r\n//Import action creators\r\n\r\nclass ArrayDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.yellowColor = '#ffd319';\r\n    this.orangeColor = '#ff901f';\r\n    this.pinkColor = '#ff2975';\r\n    this.lightPurpleColor = '#f222ff';\r\n    this.darkPurpleColor = '#8c1eff';\r\n  }\r\n  renderedArray = () => {\r\n    const {\r\n      array,\r\n      currentBubbleFocused,\r\n      currentSorted,\r\n      currentSwappers,\r\n      currentMergeFocused,\r\n      currentQuickFocused,\r\n      currentPivot,\r\n      currentHeapFocused,\r\n      currentSelectionFocused,\r\n      currentSelectionMin,\r\n      currentInsertionShifter,\r\n    } = this.props;\r\n\r\n    // TODO: make width and margin, fontSize depend on length of array\r\n    const elementWidthVal =\r\n      array.length < 10\r\n        ? 40\r\n        : array.length < 15\r\n        ? 35\r\n        : array.length < 22\r\n        ? 25\r\n        : array.length < 30\r\n        ? 16\r\n        : array.length < 40\r\n        ? 11\r\n        : array.length < 60\r\n        ? 9\r\n        : array.length < 75\r\n        ? 7\r\n        : array.length < 90\r\n        ? 6\r\n        : 4;\r\n    const fontSizeVal =\r\n      array.length < 10\r\n        ? 20\r\n        : array.length < 22\r\n        ? 13\r\n        : array.length < 30\r\n        ? 10\r\n        : array.length < 40\r\n        ? 0\r\n        : 0;\r\n    const borderRadiusVal =\r\n      array.length < 22 ? 4 : array.length < 30 ? 3 : array.length < 70 ? 2 : 1;\r\n    const borderWidthVal = array.length < 30 ? 2 : 0;\r\n    const borderWidth = `${borderWidthVal}px`;\r\n    const borderRadius = `${borderRadiusVal}px`;\r\n    const elementWidth = `${elementWidthVal}px`;\r\n    const margin = `${1}px`;\r\n    const textColor = 'white';\r\n    const fontSize = `${fontSizeVal}px`;\r\n    const yellowColor = '#ffd319';\r\n    const orangeColor = '#ff901f';\r\n    const pinkColor = '#ff2975';\r\n    const lightPurpleColor = '#f222ff';\r\n    const darkPurpleColor = '#8c1eff';\r\n    if (array.length) {\r\n      return array.map((val, index) => {\r\n        let elementColor = this.darkPurpleColor; // purple\r\n\r\n        if (currentSwappers.includes(index)) {\r\n          elementColor = this.orangeColor; // redish pink\r\n        }\r\n        // TODO: This is where we will add currentFocused for other algs\r\n        else if (\r\n          currentMergeFocused.includes(index) ||\r\n          currentBubbleFocused.includes(index) ||\r\n          currentQuickFocused.includes(index) ||\r\n          currentHeapFocused.includes(index) ||\r\n          currentSelectionFocused.includes(index)\r\n        ) {\r\n          elementColor = this.pinkColor; // yellowish orange\r\n        } else if (\r\n          currentPivot === index ||\r\n          currentSelectionMin === index ||\r\n          currentInsertionShifter === index\r\n        ) {\r\n          elementColor = this.yellowColor; // yellowish orange\r\n        }\r\n\r\n        //TODO: logic for pivot\r\n        else if (currentSorted.includes(index)) {\r\n          elementColor = this.lightPurpleColor; // dark blue\r\n        }\r\n        return (\r\n          <div\r\n            className=\"arrayElement\"\r\n            key={index}\r\n            style={{\r\n              height: `${val * 4}px`,\r\n              width: elementWidth,\r\n              marginLeft: margin,\r\n              marginRight: margin,\r\n              backgroundColor: elementColor,\r\n              color: textColor,\r\n              fontSize: fontSize,\r\n              borderRadius: borderRadius,\r\n              borderWidth: borderWidth,\r\n            }}\r\n          >\r\n            {val}\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"container\" id=\"arrayDisplay\">\r\n        <div className=\"row\">\r\n          <div className=\"col-10\" id=\"arrayBody\">\r\n            {this.renderedArray()}\r\n          </div>\r\n          <div className=\"col-2\" id=\"legend\">\r\n            <div className=\"legendBlock\">\r\n              <div\r\n                className=\"colorBlock\"\r\n                style={{ backgroundColor: this.yellowColor }}\r\n              ></div>\r\n              <p>\r\n                <strong style={{ color: this.yellowColor }}>Yellow:</strong> An\r\n                element is a pivot-(Quick Sort), a Min-(Selection Sort), or the\r\n                element being inserted-(Insertion Sort)\r\n              </p>\r\n            </div>\r\n            <div className=\"legendBlock\">\r\n              <div\r\n                className=\"colorBlock\"\r\n                style={{ backgroundColor: this.orangeColor }}\r\n              ></div>\r\n              <p>\r\n                <strong style={{ color: this.orangeColor }}>Orange:</strong> A\r\n                pair of elements will be swapped\r\n              </p>\r\n            </div>\r\n            <div className=\"legendBlock\">\r\n              <div\r\n                className=\"colorBlock\"\r\n                style={{ backgroundColor: this.pinkColor }}\r\n              ></div>\r\n              <p>\r\n                <strong style={{ color: this.pinkColor }}>Pink:</strong> A pair\r\n                of elements is being evaluated\r\n              </p>\r\n            </div>\r\n            <div className=\"legendBlock\">\r\n              <div\r\n                className=\"colorBlock\"\r\n                style={{ backgroundColor: this.lightPurpleColor }}\r\n              ></div>\r\n              <p>\r\n                <strong style={{ color: this.lightPurpleColor }}>\r\n                  Light Purple:\r\n                </strong>{' '}\r\n                An element is in its final position\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"legendBlock\">\r\n              <div\r\n                className=\"colorBlock\"\r\n                style={{ backgroundColor: this.darkPurpleColor }}\r\n              ></div>\r\n              <p>\r\n                <strong style={{ color: this.darkPurpleColor }}>\r\n                  Dark Purple:\r\n                </strong>{' '}\r\n                An element is still unsorted\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  array,\r\n  currentBubbleFocused,\r\n  currentSwappers,\r\n  currentSorted,\r\n  currentMergeFocused,\r\n  currentQuickFocused,\r\n  currentPivot,\r\n  currentHeapFocused,\r\n  currentSelectionFocused,\r\n  currentSelectionMin,\r\n  currentInsertionShifter,\r\n}) => ({\r\n  array,\r\n  currentBubbleFocused,\r\n  currentSwappers,\r\n  currentSorted,\r\n  currentMergeFocused,\r\n  currentQuickFocused,\r\n  currentPivot,\r\n  currentHeapFocused,\r\n  currentSelectionFocused,\r\n  currentSelectionMin,\r\n  currentInsertionShifter,\r\n});\r\nconst mapDispatchToProps = () => (dispatch) => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ArrayDisplay);\r\n","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\algorithms\\bubbleSort.js",[],"C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\algorithms\\mergeSort.js",[],"C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\algorithms\\quickSort.js",[],"C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\algorithms\\heapSort.js",[],"C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\algorithms\\selectionSort.js",[],"C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\algorithms\\insertionSort.js",["69"],"import {\r\n  setCurrentSwappers,\r\n  setArray,\r\n  setCurrentSelectionFocused,\r\n  setCurrentSorted,\r\n  setIsRunning,\r\n  setCurrentInsertionShifter,\r\n} from '../actionCreators';\r\n/*\r\nTypes: shift\r\n\r\n*/\r\nconst insertionSort = (stateArr, dispatch, speed, getSpeed, getIsRunning) => {\r\n  let array = stateArr.slice(0);\r\n  let frames = [];\r\n\r\n  // go through each element in array starting at index 1\r\n  for (let i = 1; i < array.length; i++) {\r\n    // push a frame showing the current index that holds the element to be shifted\r\n    frames.push(['shift', i, array.slice(0)]);\r\n    let j = i - 1;\r\n    let key = array[i];\r\n    // while element is larger than element to it's left, keep swapping\r\n    frames.push(['focus', [j]]);\r\n    let skip = j;\r\n    while (j >= 0 && array[j] > key) {\r\n      frames.push(['swap', [j]]);\r\n      array[j + 1] = array[j];\r\n      array[j] = key;\r\n\r\n      frames.push(['shift', j, array.slice(0)]);\r\n      j--;\r\n      if (j >= 0) frames.push(['focus', [j]]);\r\n    }\r\n    array[j + 1] = key;\r\n    frames.push(['empty']);\r\n  }\r\n  frames.push(['final', array.slice(0)]);\r\n\r\n  console.log(array);\r\n  setTimeout(() => {\r\n    dispatchFrames(frames, dispatch, array, speed, getSpeed, getIsRunning);\r\n    return array;\r\n  }, 100);\r\n};\r\n\r\nconst dispatchFrames = (\r\n  frames,\r\n  dispatch,\r\n  arr,\r\n  speed,\r\n  getSpeed,\r\n  getIsRunning\r\n) => {\r\n  if (!getIsRunning()) {\r\n    dispatch(setCurrentSelectionFocused([]));\r\n    dispatch(setCurrentSwappers([]));\r\n    dispatch(setCurrentSorted([]));\r\n    dispatch(setCurrentInsertionShifter(null));\r\n    dispatch(setIsRunning(false));\r\n    return;\r\n  }\r\n  speed = getSpeed();\r\n  if (!frames.length) {\r\n    dispatch(setCurrentSelectionFocused(arr.map((val, index) => index)));\r\n\r\n    setTimeout(() => {\r\n      dispatch(setCurrentSelectionFocused([]));\r\n      dispatch(setCurrentSorted(arr.map((num, index) => index)));\r\n      dispatch(setCurrentInsertionShifter(null));\r\n      dispatch(setCurrentSwappers([]));\r\n      dispatch(setIsRunning(false));\r\n    }, speed);\r\n    return;\r\n  }\r\n  // min focus swap arr empy\r\n  let dispatchFunc = null;\r\n  const method = frames[0][0];\r\n  let outFrame = [];\r\n  //frame represents whole array\r\n  if (method === 'swap') {\r\n    outFrame = frames[0][1];\r\n    dispatch(setCurrentSelectionFocused([]));\r\n    dispatchFunc = setCurrentSwappers;\r\n  } else if (method === 'shift') {\r\n    outFrame = frames[0][1];\r\n    dispatchFunc = setCurrentInsertionShifter;\r\n    dispatch(setArray(frames[0][2]));\r\n    dispatch(setCurrentSwappers([]));\r\n  } else if (method === 'focus') {\r\n    outFrame = frames[0][1];\r\n    dispatchFunc = setCurrentSelectionFocused;\r\n  } else if (method === 'final') {\r\n    outFrame.push(frames[0][1]);\r\n    dispatchFunc = setCurrentSorted;\r\n  } else if (method === 'empty') {\r\n    dispatchFunc = setCurrentSwappers;\r\n    dispatch(setCurrentSelectionFocused([]));\r\n    dispatch(setCurrentSwappers([]));\r\n    dispatch(setCurrentInsertionShifter(null));\r\n  }\r\n\r\n  // Dispatch the leading frame and pop it off the frame list\r\n  dispatch(dispatchFunc(outFrame));\r\n\r\n  // Recursively call dispatchFrames with updated frames after specified time\r\n  frames.shift();\r\n  setTimeout(() => {\r\n    dispatchFrames(frames, dispatch, arr, speed, getSpeed, getIsRunning);\r\n  }, speed);\r\n};\r\n\r\nexport default insertionSort;\r\n","C:\\Users\\Zachery\\Desktop\\SortingVisualizer\\sorting-visualizer\\src\\components\\Dropdown.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":25},{"ruleId":"74","severity":1,"message":"78","line":1,"column":27,"nodeType":"76","messageId":"77","endLine":1,"endColumn":35},{"ruleId":"74","severity":1,"message":"79","line":115,"column":7,"nodeType":"76","messageId":"77","endLine":115,"endColumn":29},{"ruleId":"74","severity":1,"message":"80","line":119,"column":7,"nodeType":"76","messageId":"77","endLine":119,"endColumn":16},{"ruleId":"74","severity":1,"message":"81","line":120,"column":7,"nodeType":"76","messageId":"77","endLine":120,"endColumn":15},{"ruleId":"74","severity":1,"message":"82","line":68,"column":11,"nodeType":"76","messageId":"77","endLine":68,"endColumn":22},{"ruleId":"74","severity":1,"message":"83","line":69,"column":11,"nodeType":"76","messageId":"77","endLine":69,"endColumn":22},{"ruleId":"74","severity":1,"message":"84","line":70,"column":11,"nodeType":"76","messageId":"77","endLine":70,"endColumn":20},{"ruleId":"74","severity":1,"message":"85","line":71,"column":11,"nodeType":"76","messageId":"77","endLine":71,"endColumn":27},{"ruleId":"74","severity":1,"message":"86","line":72,"column":11,"nodeType":"76","messageId":"77","endLine":72,"endColumn":26},{"ruleId":"74","severity":1,"message":"87","line":25,"column":9,"nodeType":"76","messageId":"77","endLine":25,"endColumn":13},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'Suspense' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'changeCurrentAlgorithm' is assigned a value but never used.","'pauseSort' is assigned a value but never used.","'isPaused' is assigned a value but never used.","'yellowColor' is assigned a value but never used.","'orangeColor' is assigned a value but never used.","'pinkColor' is assigned a value but never used.","'lightPurpleColor' is assigned a value but never used.","'darkPurpleColor' is assigned a value but never used.","'skip' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]